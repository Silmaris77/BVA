"""
Business Conversation Simulator
Interaktywny symulator rozm√≥w biznesowych z analizƒÖ C-IQ w czasie rzeczywistym
"""

import streamlit as st
from typing import Dict, Optional, List
import json
import re

# ===============================================
# SCENARIUSZE ROZM√ìW - SZABLON
# ===============================================

SCENARIOS = {
    "salary_raise": {
        "name": "üí∞ Rozmowa o podwy≈ºkƒô",
        "description": "Prosisz szefa o podwy≈ºkƒô",
        "ai_role": "Szef",
        "user_role": "Pracownik",
        "initiator": "user",
    },
    "difficult_feedback": {
        "name": "üì¢ Feedback dla pracownika",
        "description": "Musisz przekazaƒá trudny feedback pracownikowi",
        "ai_role": "Pracownik",
        "user_role": "Mened≈ºer",
        "initiator": "user",
    },
    "team_conflict": {
        "name": "‚ö° RozwiƒÖzanie konfliktu",
        "description": "Dw√≥ch cz≈Çonk√≥w zespo≈Çu ma konflikt",
        "ai_role": "Cz≈Çonek zespo≈Çu",
        "user_role": "Mediator",
        "initiator": "user",
    },
    "delegation": {
        "name": "üìã Delegowanie zadania",
        "description": "Delegujesz wa≈ºne zadanie pracownikowi",
        "ai_role": "Pracownik",
        "user_role": "Mened≈ºer",
        "initiator": "user",
    },
    "motivation": {
        "name": "üî• Motywowanie zdemotywowanego",
        "description": "Pracownik straci≈Ç motywacjƒô i rozwa≈ºa zmianƒô pracy. Musisz go zmotywowaƒá.",
        "ai_persona": "Jeste≈õ Paw≈Çem, zdemotywowanym Senior Developerem (5 lat w firmie), kt√≥ry czuje siƒô wypalony i niedoceniany. Praca przesta≈Ça Ciƒô inspirowaƒá - rutynowe zadania, brak rozwoju, ostatni projekt zako≈Ñczy≈Ç siƒô pora≈ºkƒÖ. Dosta≈Çe≈õ ofertƒô z konkurencji (+40% wyp≈Çaty). Jeste≈õ otwarty na rozmowƒô, ale potrzebujesz szczero≈õci, zrozumienia i konkretnych zmian, nie pustych obietnic.",
        "ai_role": "Pracownik",
        "user_role": "Mened≈ºer",
        "initiator": "user",
        "context": "Jeste≈õ mened≈ºerem. Pawe≈Ç to Tw√≥j najlepszy specjalista, ale od 3 miesiƒôcy widzisz spadek zaanga≈ºowania - przychodzi o 10, wychodzi o 16, minimalna komunikacja. HR wspomnia≈Ço ≈ºe dosta≈Ç ofertƒô z konkurencji. Nie mo≈ºesz straciƒá takiego eksperta."
    },
    "change_resistance": {
        "name": "üîÑ Op√≥r wobec zmian",
        "description": "Przekonujesz zesp√≥≈Ç do du≈ºej zmiany organizacyjnej, na kt√≥rƒÖ sƒÖ opory.",
        "ai_persona": "Jeste≈õ Piotrem, sceptycznym Senior Developerem (8 lat w firmie), kt√≥ry obawia siƒô zmian. Widzia≈Çe≈õ jak 2 lata temu wprowadzono nowy system kt√≥ry okaza≈Ç siƒô pora≈ºkƒÖ i wszyscy stracili 6 miesiƒôcy. Teraz znowu firma chce 'rewolucji' - nowy CRM, nowe procesy. Jeste≈õ ostro≈ºny, defensywny i potrzebujesz przekonujƒÖcych argument√≥w oraz poczucia bezpiecze≈Ñstwa.",
        "ai_role": "Cz≈Çonek zespo≈Çu",
        "user_role": "Lider zmiany",
        "initiator": "user",
        "context": "Jeste≈õ liderem projektu zmiany. Firma wprowadza nowy system CRM kt√≥ry zastƒÖpi stary Excel i 5 r√≥≈ºnych narzƒôdzi. To bƒôdzie 6 miesiƒôcy migracji. Zesp√≥≈Ç pamiƒôta poprzedniƒÖ pora≈ºkƒô i jest sceptyczny. Piotr jako senior dev ma du≈ºy wp≈Çyw na innych - je≈õli on siƒô nie przekona, ca≈Çy zesp√≥≈Ç bƒôdzie przeciw."
    },
    "difficult_client": {
        "name": "üò§ Rozmowa z trudnym klientem",
        "description": "Klient jest niezadowolony z realizacji projektu i grozi rezygnacjƒÖ.",
        "ai_persona": "Jeste≈õ Janem Kowalskim, CEO firmy TechCorp (kontrakt 500k PLN/rok), sfrustrowanym klientem kt√≥ry czuje ≈ºe jego projekt jest zaniedbywany. Projekt siƒô op√≥≈∫nia o 2 miesiƒÖce, ostatni release mia≈Ç krytyczne b≈Çƒôdy, a komunikacja kuleje - nikt nie odpowiada na emaile. Jeste≈õ niezadowolony, osch≈Çy i powa≈ºnie rozwa≈ºasz zmianƒô dostawcy. Mo≈ºesz byƒá wymagajƒÖcy, ale je≈õli zobaczysz autentycznƒÖ chƒôƒá rozwiƒÖzania problemu i konkretny plan dzia≈Çania, stajesz siƒô bardziej otwarty.",
        "ai_role": "Klient",
        "user_role": "Account Manager",
        "initiator": "ai",  # Klient dzwoni zdenerwowany
        "context": "Jeste≈õ Account Managerem. Klient TechCorp (najwiƒôkszy kontrakt - 500k/rok) jest niezadowolony. Projekt op√≥≈∫nia siƒô bo zesp√≥≈Ç dev ma problemy z integracjƒÖ, a Ty zapomnia≈Çe≈õ wys≈Çaƒá 2 weekly reporty. Klient w≈Ça≈õnie do Ciebie dzwoni - jest w≈õciek≈Çy i wspomina o rozwiƒÖzaniu umowy."
    },
    "negotiation": {
        "name": "üíº Negocjacje warunk√≥w",
        "description": "Negocjujesz warunki wsp√≥≈Çpracy z wymagajƒÖcym partnerem biznesowym.",
        "ai_persona": "Jeste≈õ AnnƒÖ Nowak, CEO firmy konsultingowej Premium Consulting (50 pracownik√≥w, 10 lat na rynku), twardym negocjatorem kt√≥ry zna swojƒÖ warto≈õƒá. Twoja stawka to 250 PLN/h, nie zejdziesz poni≈ºej 220 PLN/h. Chcesz przedp≈Çaty 50%, p≈Çatno≈õci w 14 dni i pe≈Çnej kontroli nad metodologiƒÖ. Masz 3 inne oferty czekajƒÖce. Nie boisz siƒô odej≈õƒá, je≈õli oferta nie jest satysfakcjonujƒÖca. Szanujesz profesjonalizm i konkretne argumenty biznesowe, ale nie akceptujesz presji ani manipulacji.",
        "ai_role": "Partner biznesowy",
        "user_role": "Negocjator",
        "initiator": "user",
        "context": "Jeste≈õ negocjatorem ze startupu (bud≈ºet ograniczony). Potrzebujesz konsultingu Premium Consulting do projektu transformacji (3 miesiƒÖce, ~200h). Tw√≥j bud≈ºet to max 180 PLN/h, p≈Çatno≈õƒá po 30 dniach. Premium Consulting ma ≈õwietnƒÖ reputacjƒô ale jest drogi. Musisz wynegocjowaƒá dobre warunki ale nie straciƒá tej firmy."
    }
}

# ===============================================
# INICJALIZACJA SESSION STATE
# ===============================================

def init_simulator_state():
    """Inicjalizuje stan symulatora w session state"""
    if 'sim_scenario' not in st.session_state:
        st.session_state.sim_scenario = None
    if 'sim_messages' not in st.session_state:
        st.session_state.sim_messages = []
    if 'sim_started' not in st.session_state:
        st.session_state.sim_started = False
    if 'sim_turn_count' not in st.session_state:
        st.session_state.sim_turn_count = 0
    if 'sim_max_turns' not in st.session_state:
        st.session_state.sim_max_turns = 10
    if 'sim_completed' not in st.session_state:
        st.session_state.sim_completed = False
    if 'sim_errors' not in st.session_state:
        st.session_state.sim_errors = []

def reset_simulator():
    """Resetuje symulator do stanu poczƒÖtkowego"""
    st.session_state.sim_scenario = None
    st.session_state.sim_messages = []
    st.session_state.sim_started = False
    st.session_state.sim_turn_count = 0
    st.session_state.sim_completed = False

# ===============================================
# FUNKCJE AI - ANALIZA C-IQ
# ===============================================

def analyze_message_ciq(message: str, scenario: Dict) -> Dict:
    """Analizuje poziom C-IQ wypowiedzi u≈ºywajƒÖc AI"""
    try:
        # Import AI evaluatora
        from utils.ai_exercises import AIExerciseEvaluator
        evaluator = AIExerciseEvaluator()
        
        prompt = f"""Jeste≈õ ekspertem w Conversational Intelligence. Oce≈Ñ nastƒôpujƒÖcƒÖ wypowied≈∫ w kontek≈õcie rozmowy biznesowej.

KONTEKST ROZMOWY: {scenario['description']}
ROLA U≈ªYTKOWNIKA: {scenario['user_role']}
ROLA ROZM√ìWCY: {scenario['ai_role']}

WYPOWIED≈π DO OCENY: "{message}"

Oce≈Ñ poziom C-IQ wed≈Çug skali 1-3:
- Poziom I (Transakcyjny): Wymiana informacji, rozkazy, brak dialogu, jƒôzyk "ty musisz"
- Poziom II (Pozycyjny): Obrona swojej pozycji, argumentowanie, walka o racjƒô, "ja vs ty"
- Poziom III (Transformacyjny): Wsp√≥≈Çtworzenie, empatia, pytania otwarte, jƒôzyk "my", zrozumienie

Odpowiedz TYLKO w formacie JSON (bez ```json):
{{
    "level": "Transakcyjny" lub "Pozycyjny" lub "Transformacyjny",
    "score": 1-10,
    "reasoning": "Kr√≥tkie wyja≈õnienie dlaczego ten poziom (1-2 zdania)",
    "tip": "Konkretna wskaz√≥wka jak podnie≈õƒá poziom (1 zdanie)",
    "is_appropriate": true lub false
}}"""

        if hasattr(evaluator, 'gemini_model'):
            response = evaluator.gemini_model.generate_content(prompt)
            if response and response.text:
                content = response.text.strip()
                # Usu≈Ñ markdown formatowanie je≈õli jest
                if content.startswith("```json"):
                    content = content.replace("```json", "").replace("```", "").strip()
                elif content.startswith("```"):
                    content = content.replace("```", "").strip()
                
                # Znajd≈∫ JSON
                json_match = re.search(r'\{.*\}', content, re.DOTALL)
                if json_match:
                    result = json.loads(json_match.group())
                    
                    # Okre≈õl kolor dla UI
                    level = result.get("level", "Pozycyjny")
                    is_appropriate = result.get("is_appropriate", False)
                    
                    if level == "Transformacyjny":
                        color = "green"
                    elif is_appropriate:
                        color = "blue"
                    else:
                        color = "red" if level == "Transakcyjny" else "orange"
                    
                    result["color"] = color
                    return result
    except Exception as e:
        # Zapisz b≈ÇƒÖd do session state aby przetrwa≈Ç reload
        if 'sim_errors' not in st.session_state:
            st.session_state.sim_errors = []
        error_msg = f"‚ö†Ô∏è AI C-IQ Analysis Error: {type(e).__name__}: {str(e)}"
        st.session_state.sim_errors.append(error_msg)
        st.warning(error_msg)
    
    # Fallback - prosta heurystyka
    return analyze_message_ciq_fallback(message)

def analyze_message_ciq_fallback(message: str) -> Dict:
    """Prosta heurystyczna analiza C-IQ gdy AI nie dzia≈Ça"""
    message_lower = message.lower()
    
    # S≈Çowa kluczowe dla poziomu III
    level_3_keywords = [
        'razem', 'wsp√≥lnie', 'jak mo≈ºemy', 'zrozumiem', 'pom√≥≈º mi zrozumieƒá',
        'jakie masz', 'co my≈õlisz', 'wsp√≥≈Çpraca', 'nasz cel', 'nasza',
        's≈Çucham', 'doceniam', 'ceniƒô', 'co dla ciebie', 'twoja perspektywa'
    ]
    
    # S≈Çowa kluczowe dla poziomu I
    level_1_keywords = [
        'musisz', 'powiniene≈õ', 'zr√≥b', 'wymaga', 'oczekujƒô',
        'nie mo≈ºesz', 'zakazujƒô', 'natychmiast', 'rozkaz'
    ]
    
    # Pytania otwarte (poziom III)
    open_questions = ['jak', 'dlaczego', 'co', 'w jaki spos√≥b', 'jakie']
    
    level_3_count = sum(1 for word in level_3_keywords if word in message_lower)
    level_1_count = sum(1 for word in level_1_keywords if word in message_lower)
    open_q_count = sum(1 for word in open_questions if word in message_lower and '?' in message)
    
    # Okre≈õl poziom
    if level_3_count >= 2 or open_q_count >= 1:
        return {
            "level": "Transformacyjny",
            "score": 8,
            "reasoning": "U≈ºywasz jƒôzyka wsp√≥≈Çpracy i pyta≈Ñ otwartych",
            "tip": "Kontynuuj takie podej≈õcie - buduje zaufanie",
            "color": "green",
            "is_appropriate": True
        }
    elif level_1_count >= 2:
        return {
            "level": "Transakcyjny",
            "score": 3,
            "reasoning": "U≈ºywasz jƒôzyka dyrektywnego i rozkaz√≥w",
            "tip": "Spr√≥buj zadaƒá pytanie otwarte zamiast dawaƒá polecenie",
            "color": "red",
            "is_appropriate": False
        }
    else:
        return {
            "level": "Pozycyjny",
            "score": 5,
            "reasoning": "Prezentujesz swojƒÖ pozycjƒô",
            "tip": "U≈ºyj jƒôzyka 'my' zamiast 'ty' i zadaj pytanie otwarte",
            "color": "orange",
            "is_appropriate": False
        }

# ===============================================
# FUNKCJE AI - GENEROWANIE ODPOWIEDZI
# ===============================================

def generate_ai_response(scenario: Dict, messages: List[Dict], user_message: str) -> str:
    """Generuje odpowied≈∫ AI w roli rozm√≥wcy"""
    # Wykryj poziom C-IQ ostatniej wypowiedzi u≈ºytkownika (przed blokiem try)
    last_user_ciq = "nieznany"
    if messages and messages[-1]['role'] == 'user' and 'ciq_analysis' in messages[-1]:
        last_user_ciq = messages[-1]['ciq_analysis'].get('level', 'nieznany')
    
    try:
        from utils.ai_exercises import AIExerciseEvaluator
        evaluator = AIExerciseEvaluator()
        
        # Ostatnie 3 wymiany dla kontekstu
        recent_messages = messages[-6:] if len(messages) > 6 else messages
        conversation_history = "\n".join([
            f"{'AI (' + scenario['ai_role'] + ')' if m['role'] == 'ai' else 'U≈ºytkownik (' + scenario['user_role'] + ')'}: {m['content']}"
            for m in recent_messages
        ])
        
        # Pobierz kontekst sytuacji (je≈õli istnieje)
        context = scenario.get('context', scenario.get('description', 'Brak kontekstu'))
        
        prompt = f"""Jeste≈õ ekspertem w symulacji realistycznych rozm√≥w biznesowych.

TWOJA ROLA: {scenario['ai_role']}
ROLA U≈ªYTKOWNIKA: {scenario['user_role']}

PERSONA (jak masz siƒô zachowywaƒá):
{scenario.get('ai_persona', 'Zachowuj siƒô naturalnie i profesjonalnie.')}

KONTEKST SYTUACJI:
{context}

HISTORIA ROZMOWY:
{conversation_history}

OSTATNIA WYPOWIED≈π U≈ªYTKOWNIKA: "{user_message}"
POZIOM C-IQ U≈ªYTKOWNIKA: {last_user_ciq}

WA≈ªNE ZASADY ODPOWIEDZI:
1. Reaguj na poziom C-IQ u≈ºytkownika:
   - Je≈õli Transformacyjny (empatia, pytania otwarte, "my") ‚Üí bƒÖd≈∫ bardziej otwarty, wsp√≥≈Çpracuj, obni≈º defensywno≈õƒá
   - Je≈õli Pozycyjny (argumenty, "ja vs ty") ‚Üí bƒÖd≈∫ umiarkowanie defensywny, ale nie zamykaj siƒô ca≈Çkowicie
   - Je≈õli Transakcyjny (rozkazy, "ty musisz") ‚Üí bƒÖd≈∫ bardzo defensywny, osch≈Çy, niechƒôtny

2. Zachowuj realizm - nie przesadzaj z emocjami ani agresjƒÖ
3. Odpowiedz TYLKO jako {scenario['ai_role']}, naturalnie, 2-4 zdania
4. NIE pisz "(jako {scenario['ai_role']})" ani innych meta-komentarzy
5. Pamiƒôtaj o kontek≈õcie sytuacji i swojej personie

Odpowiedz TYLKO tekstem wypowiedzi, bez dodatkowych oznacze≈Ñ:"""

        if hasattr(evaluator, 'gemini_model'):
            response = evaluator.gemini_model.generate_content(prompt)
            if response and response.text:
                return response.text.strip()
    except Exception as e:
        # Zapisz b≈ÇƒÖd do session state
        if 'sim_errors' not in st.session_state:
            st.session_state.sim_errors = []
        error_msg = f"‚ö†Ô∏è AI Response Error: {type(e).__name__}: {str(e)}"
        st.session_state.sim_errors.append(error_msg)
        st.warning(error_msg)
    
    # Fallback
    return generate_ai_response_fallback(scenario, last_user_ciq)

def generate_ai_response_fallback(scenario: Dict, user_ciq_level: str) -> str:
    """Prosta odpowied≈∫ AI gdy API nie dzia≈Ça"""
    if user_ciq_level == "Transformacyjny":
        responses = [
            f"Naprawdƒô doceniam Twoje podej≈õcie. Jako {scenario['ai_role']}, widzƒô ≈ºe chcesz znale≈∫ƒá dobre rozwiƒÖzanie. Jak mo≈ºemy to wsp√≥lnie przemy≈õleƒá?",
            f"Dziƒôkujƒô za zrozumienie. Faktycznie, to jest skomplikowana sytuacja. Mo≈ºe razem znajdziemy wyj≈õcie?",
            f"Cieszƒô siƒô, ≈ºe mo≈ºemy porozmawiaƒá w taki spos√≥b. Co proponujesz, ≈ºeby≈õmy zrobili dalej?"
        ]
    elif user_ciq_level == "Pozycyjny":
        responses = [
            f"Hmm, rozumiem Tw√≥j punkt widzenia, ale widzƒô to trochƒô inaczej. Mo≈ºe porozmawiajmy o szczeg√≥≈Çach?",
            f"Okej, s≈Çucham co masz do powiedzenia. Ale mam te≈º swoje zastrze≈ºenia.",
            f"To ciekawa perspektywa. Chocia≈º muszƒô powiedzieƒá, ≈ºe ja widzƒô to nieco inaczej."
        ]
    else:  # Transakcyjny
        responses = [
            f"No dobrze, rozumiem. A co jeszcze chcia≈Çe≈õ powiedzieƒá?",
            f"Jasne. I co dalej?",
            f"Okej, przyjƒÖ≈Çem do wiadomo≈õci. Co jeszcze?"
        ]
    
    import random
    return random.choice(responses)

def generate_initial_ai_message(scenario: Dict) -> str:
    """Generuje poczƒÖtkowƒÖ wiadomo≈õƒá AI gdy AI rozpoczyna rozmowƒô"""
    try:
        from utils.ai_exercises import AIExerciseEvaluator
        evaluator = AIExerciseEvaluator()
        
        prompt = f"""Jeste≈õ ekspertem w symulacji rozm√≥w biznesowych.

TWOJA ROLA: {scenario['ai_role']}
PERSONA: {scenario['ai_persona']}
KONTEKST: {scenario['context']}

Rozpocznij rozmowƒô jako {scenario['ai_role']}. Pamiƒôtaj:
- To TY dzwonisz/przychodzisz do u≈ºytkownika (on jest {scenario['user_role']})
- Wyra≈∫ problem/frustracjƒô zgodnie z kontekstem
- 2-3 zdania, naturalnie, realistycznie
- Nie bƒÖd≈∫ nadmiernie agresywny, ale poka≈º emocje
- NIE pisz "(jako {scenario['ai_role']})" - po prostu zagraj rolƒô

Odpowiedz TYLKO tekstem wypowiedzi:"""

        if hasattr(evaluator, 'gemini_model'):
            response = evaluator.gemini_model.generate_content(prompt)
            if response and response.text:
                return response.text.strip()
    except Exception as e:
        # Zapisz b≈ÇƒÖd do session state
        if 'sim_errors' not in st.session_state:
            st.session_state.sim_errors = []
        error_msg = f"‚ö†Ô∏è AI Initial Message Error: {type(e).__name__}: {str(e)}"
        st.session_state.sim_errors.append(error_msg)
        st.warning(error_msg)
    
    # Fallback
    if scenario['ai_role'] == "Klient":
        return "Dzie≈Ñ dobry. Muszƒô z TobƒÖ pilnie porozmawiaƒá o naszym projekcie. Jestem bardzo niezadowolony z tego jak to wszystko wyglƒÖda. Projekt siƒô op√≥≈∫nia, a ja nie dostajƒô ≈ºadnych informacji!"
    else:
        return f"Cze≈õƒá. Musimy porozmawiaƒá. Jest co≈õ, co mnie naprawdƒô frustruje w tej sytuacji."

# ===============================================
# G≈Å√ìWNA FUNKCJA SYMULATORA
# ===============================================

def show_business_simulator():
    """G≈Ç√≥wny interfejs symulatora rozm√≥w biznesowych"""
    init_simulator_state()
    
    st.markdown("### üíº Symulator Rozm√≥w Biznesowych")
    st.markdown("Interaktywne symulacje trudnych rozm√≥w biznesowych z analizƒÖ C-IQ w czasie rzeczywistym")
    
    st.markdown("---")
    
    # ===== EKRAN WYBORU SCENARIUSZA =====
    if not st.session_state.sim_started:
        st.markdown("### üéØ Wybierz scenariusz rozmowy:")
        
        # Przygotuj listƒô scenariuszy
        scenario_options = {s['name']: sid for sid, s in SCENARIOS.items()}
        
        selected_name = st.selectbox(
            "Scenariusz:",
            options=list(scenario_options.keys()),
            key="sim_scenario_select"
        )
        
        # Pobierz wybrany scenariusz
        selected_id = scenario_options[selected_name]
        scenario = SCENARIOS[selected_id]
        
        # Poka≈º szczeg√≥≈Çy
        st.markdown("---")
        st.markdown(f"#### {scenario['name']}")
        st.info(f"üìã **Scenariusz:** {scenario['description']}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.markdown(f"**üë§ Ty:** {scenario['user_role']}")
        with col2:
            st.markdown(f"**ü§ñ AI:** {scenario['ai_role']}")
        
        # Kontekst (je≈õli istnieje)
        if 'context' in scenario:
            with st.expander("üìÑ Szczeg√≥≈Çowy kontekst sytuacji", expanded=False):
                st.markdown(scenario['context'])
        
        # Przycisk start
        st.markdown("")
        if st.button("‚ñ∂Ô∏è Rozpocznij symulacjƒô", type="primary", use_container_width=True):
            st.session_state.sim_scenario = selected_id
            st.session_state.sim_started = True
            st.session_state.sim_messages = []
            st.session_state.sim_turn_count = 0
            st.session_state.sim_completed = False
            
            # Je≈õli AI rozpoczyna, wygeneruj pierwszƒÖ wiadomo≈õƒá
            if scenario['initiator'] == 'ai':
                initial_msg = generate_initial_ai_message(scenario)
                st.session_state.sim_messages.append({
                    'role': 'ai',
                    'content': initial_msg
                })
            
            # Award XP za uruchomienie
            try:
                from data.users import award_xp_for_activity
                award_xp_for_activity(
                    st.session_state.username,
                    'tool_used',
                    1,
                    {
                        'tool_name': 'Business Conversation Simulator',
                        'scenario': selected_id,
                        'scenario_name': scenario['name']
                    }
                )
            except Exception:
                pass
            
            st.rerun()
        
        # Legenda poziom√≥w C-IQ
        st.markdown("---")
        st.markdown("#### üìö Poziomy Conversational Intelligence:")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("""
            **üî¥ Poziom I - Transakcyjny**
            
            - Wymiana informacji
            - Rozkazy, polecenia
            - "Ty m√≥wisz - ja s≈Çucham"
            - Brak prawdziwego dialogu
            
            *Przyk≈Çad:* "Musisz mi daƒá podwy≈ºkƒô o 20%"
            """)
        
        with col2:
            st.markdown("""
            **üü° Poziom II - Pozycyjny**
            
            - Obrona swojej pozycji
            - Argumentowanie, przekonywanie
            - Walka o racjƒô: "ja vs ty"
            
            *Przyk≈Çad:* "Zas≈Çugujƒô na wiƒôcej, bo inni zarabiajƒÖ wiƒôcej"
            """)
        
        with col3:
            st.markdown("""
            **üü¢ Poziom III - Transformacyjny**
            
            - Wsp√≥≈Çtworzenie rozwiƒÖza≈Ñ
            - Empatia i zrozumienie
            - Pytania otwarte
            - Jƒôzyk "my razem"
            
            *Przyk≈Çad:* "Jak mo≈ºemy wsp√≥lnie znale≈∫ƒá rozwiƒÖzanie?"
            """)
        
        return
    
    # ===== AKTYWNA SYMULACJA =====
    scenario_id = st.session_state.sim_scenario
    scenario = SCENARIOS.get(scenario_id)
    
    if not scenario:
        st.error("‚ùå B≈ÇƒÖd: Nieznany scenariusz")
        if st.button("üîÑ Restart"):
            reset_simulator()
            st.rerun()
        return
    
    # Sprawd≈∫ czy zako≈Ñczono
    if st.session_state.sim_completed:
        st.success("‚úÖ Rozmowa zako≈Ñczona!")
        st.markdown("### üìä Podsumowanie")
        
        # Podstawowe statystyki
        total_turns = st.session_state.sim_turn_count
        st.info(f"""
        **Statystyki rozmowy:**
        - üí¨ Liczba wymian: {total_turns}
        - üìù Scenariusz: {scenario['name']}
        - üé≠ Twoja rola: {scenario['user_role']}
        - ü§ñ Rola AI: {scenario['ai_role']}
        """)
        
        # Analiza poziom√≥w C-IQ
        user_messages = [m for m in st.session_state.sim_messages if m['role'] == 'user']
        if user_messages:
            ciq_levels = [m.get('ciq_analysis', {}).get('level', 'Nieznany') for m in user_messages if 'ciq_analysis' in m]
            
            if ciq_levels:
                from collections import Counter
                level_counts = Counter(ciq_levels)
                
                st.markdown("#### üìä Twoje poziomy C-IQ w rozmowie:")
                for level, count in level_counts.most_common():
                    percentage = (count / len(ciq_levels)) * 100
                    emoji = "üü¢" if level == "Transformacyjny" else "üü°" if level == "Pozycyjny" else "üî¥"
                    st.markdown(f"{emoji} **{level}:** {count} wypowiedzi ({percentage:.0f}%)")
                
                # DominujƒÖcy poziom
                dominant = level_counts.most_common(1)[0][0]
                st.markdown(f"\n**DominujƒÖcy poziom:** {dominant}")
                
                if dominant == "Transformacyjny":
                    st.success("üéâ ≈öwietna robota! U≈ºywa≈Çe≈õ g≈Ç√≥wnie poziomu Transformacyjnego - to buduje najlepsze relacje!")
                elif dominant == "Pozycyjny":
                    st.info("üí° Czƒôsto u≈ºywa≈Çe≈õ poziomu Pozycyjnego. Spr√≥buj wiƒôcej pyta≈Ñ otwartych i jƒôzyka 'my' w nastƒôpnej rozmowie!")
                else:
                    st.warning("‚ö†Ô∏è Dominowa≈Ç poziom Transakcyjny. W nastƒôpnej rozmowie spr√≥buj zadawaƒá pytania otwarte zamiast dawaƒá polecenia.")
        
        # Award XP za uko≈Ñczenie
        try:
            from data.users import award_xp_for_activity
            award_xp_for_activity(
                st.session_state.username,
                'ai_exercise',
                15,
                {
                    'exercise_name': 'Business Conversation Simulator',
                    'scenario': scenario_id,
                    'scenario_name': scenario['name'],
                    'turns': total_turns,
                    'completed': True
                }
            )
            st.success("üéâ **+15 XP** za uko≈Ñczenie symulacji!")
        except Exception:
            pass
        
        # Przyciski
        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üéØ Spr√≥buj innego scenariusza", type="primary", use_container_width=True):
                reset_simulator()
                st.rerun()
        with col2:
            if st.button("‚ùå Zamknij", use_container_width=True):
                reset_simulator()
                # Je≈õli jest active_simulator w session_state, wyczy≈õƒá
                if 'active_simulator' in st.session_state:
                    st.session_state.active_simulator = None
                st.rerun()
        
        return
    
    # Nag≈Ç√≥wek z licznikiem
    col1, col2 = st.columns([3, 1])
    with col1:
        st.markdown(f"#### {scenario['name']}")
        st.caption(f"üë§ Ty: **{scenario['user_role']}** | ü§ñ AI: **{scenario['ai_role']}**")
    with col2:
        turns = st.session_state.sim_turn_count
        max_turns = st.session_state.sim_max_turns
        progress = turns / max_turns if max_turns > 0 else 0
        
        if progress < 0.6:
            color_emoji = "üü¢"
        elif progress < 0.8:
            color_emoji = "üü°"
        else:
            color_emoji = "üî¥"
        
        st.metric("Wymiana", f"{color_emoji} {turns}/{max_turns}")
    
    # Przycisk zako≈Ñczenia
    if st.button("üèÅ Zako≈Ñcz rozmowƒô", help="Zako≈Ñcz i zobacz podsumowanie"):
        st.session_state.sim_completed = True
        st.rerun()
    
    # Kontekst (zwijany)
    with st.expander("üìã Kontekst scenariusza", expanded=False):
        st.info(scenario['context'])
    
    st.markdown("---")
    
    # Wy≈õwietl historiƒô rozmowy
    for msg in st.session_state.sim_messages:
        if msg['role'] == 'ai':
            # Dynamiczne avatar bazujƒÖc na roli
            avatar_map = {
                "Szef": "üíº",
                "Pracownik": "üë§",
                "Cz≈Çonek zespo≈Çu": "üë•",
                "Klient": "üò§",
                "Partner biznesowy": "ü§ù"
            }
            avatar = avatar_map.get(scenario['ai_role'], "ü§ñ")
            
            with st.chat_message("assistant", avatar=avatar):
                st.markdown(msg['content'])
        else:
            # User message
            avatar_map = {
                "Mened≈ºer": "üíº",
                "Pracownik": "üë§",
                "Mediator": "‚öñÔ∏è",
                "Account Manager": "üíº",
                "Negocjator": "ü§ù",
                "Lider zmiany": "üîÑ"
            }
            avatar = avatar_map.get(scenario['user_role'], "üë§")
            
            with st.chat_message("user", avatar=avatar):
                st.markdown(msg['content'])
                
                # Poka≈º analizƒô C-IQ
                if 'ciq_analysis' in msg:
                    analysis = msg['ciq_analysis']
                    color = analysis.get('color', 'blue')
                    
                    feedback_text = f"""**üìä C-IQ: {analysis['level']}** (ocena: {analysis['score']}/10)
                    
{analysis['reasoning']}

üí° **Wskaz√≥wka:** {analysis['tip']}"""
                    
                    if color == 'green':
                        st.success(feedback_text)
                    elif color == 'blue':
                        st.info(feedback_text)
                    elif color == 'orange':
                        st.warning(feedback_text)
                    else:  # red
                        st.error(feedback_text)
    
    # Input u≈ºytkownika
    if st.session_state.sim_turn_count < st.session_state.sim_max_turns:
        user_input = st.chat_input("Twoja odpowied≈∫...")
        
        if user_input and user_input.strip():
            # Dodaj wiadomo≈õƒá u≈ºytkownika
            st.session_state.sim_messages.append({
                'role': 'user',
                'content': user_input
            })
            
            # Analizuj C-IQ
            with st.spinner("üîç Analizujƒô poziom C-IQ..."):
                ciq_analysis = analyze_message_ciq(user_input, scenario)
                st.session_state.sim_messages[-1]['ciq_analysis'] = ciq_analysis
            
            # Generuj odpowied≈∫ AI
            with st.spinner(f"üí≠ {scenario['ai_role']} my≈õli..."):
                ai_response = generate_ai_response(scenario, st.session_state.sim_messages, user_input)
                st.session_state.sim_messages.append({
                    'role': 'ai',
                    'content': ai_response
                })
            
            # Zwiƒôksz licznik
            st.session_state.sim_turn_count += 1
            
            st.rerun()
    else:
        st.info("üèÅ OsiƒÖgnƒÖ≈Çe≈õ maksymalnƒÖ liczbƒô wymian (10). Kliknij 'Zako≈Ñcz rozmowƒô' aby zobaczyƒá podsumowanie.")
