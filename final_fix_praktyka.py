#!/usr/bin/env python3
"""
Ostateczna naprawa - zastƒÖp uszkodzone linie bezpo≈õrednio
"""

import os

def fix_broken_emoji_lines():
    """Naprawia konkretne linie z uszkodzonymi emoji"""
    
    file_path = "views/lesson.py"
    
    # Wczytaj wszystkie linie
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Znajd≈∫ i zastƒÖp uszkodzone linie
    for i, line in enumerate(lines):
        # Linia 619 (oko≈Ço)
        if 'available_tabs.append("' in line and 'Quiz ko≈Ñcowy"' in line and 'ÔøΩ' in line:
            lines[i] = line.replace('available_tabs.append("ÔøΩ Quiz ko≈Ñcowy")', 'available_tabs.append("üéì Quiz ko≈Ñcowy")')
            print(f"‚úÖ Naprawiono liniƒô {i+1}: Quiz ko≈Ñcowy")
        
        # Linia 630 (oko≈Ço)
        if 'available_tabs.append("' in line and 'Zadania Praktyczne"' in line and 'ÔøΩ' in line:
            lines[i] = line.replace('available_tabs.append("ÔøΩ Zadania Praktyczne")', 'available_tabs.append("üöÄ Zadania Praktyczne")')
            print(f"‚úÖ Naprawiono liniƒô {i+1}: Zadania Praktyczne")
    
    # Zapisz naprawiony plik
    with open(file_path, 'w', encoding='utf-8') as f:
        f.writelines(lines)
    
    print("‚úÖ Plik zosta≈Ç zapisany")

def add_missing_rendering_logic():
    """Dodaje brakujƒÖcƒÖ logikƒô renderowania"""
    
    file_path = "views/lesson.py"
    
    # Wczytaj plik
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Znajd≈∫ punkt gdzie ma byƒá dodany kod (przed komentarzem o starej strukturze)
    target = "                # Stara struktura z 'tabs' (backward compatibility)"
    
    if target not in content:
        print("‚ùå Nie znaleziono punktu wstawienia")
        return False
    
    # Kod do wstawienia
    new_logic = '''
                # Renderuj zak≈Çadki dla nowej struktury (exercises, closing_quiz)  
                if available_tabs and 'tabs' not in practical_data:
                    # Wy≈õwietl pod-zak≈Çadki dla nowej struktury
                    tabs = tabs_with_fallback(available_tabs)
                    
                    for i, (tab_key, tab_title) in enumerate(zip(tab_keys, available_tabs)):
                        with tabs[i]:
                            if tab_key == 'closing_quiz':
                                # Specjalna obs≈Çuga dla quizu ko≈Ñcowego
                                st.info("üéì **Quiz ko≈Ñcowy** - Sprawd≈∫ swojƒÖ wiedzƒô z tej lekcji. Musisz uzyskaƒá minimum 75% poprawnych odpowiedzi, aby przej≈õƒá dalej.")
                                
                                quiz_data = sub_tabs_data['closing_quiz']
                                quiz_completed, quiz_passed, earned_points = display_quiz(quiz_data, passing_threshold=75)
                                
                                # Oznacz quiz jako uko≈Ñczony po wype≈Çnieniu
                                if quiz_completed:
                                    # Zapisz stan zaliczenia quizu do sprawdzania w nawigacji
                                    closing_quiz_key = f"closing_quiz_{lesson_id}"
                                    if closing_quiz_key not in st.session_state:
                                        st.session_state[closing_quiz_key] = {}
                                    
                                    st.session_state[closing_quiz_key]["quiz_completed"] = True
                                    st.session_state[closing_quiz_key]["quiz_passed"] = quiz_passed
                                    
                                    closing_quiz_xp_key = f"closing_quiz_xp_{lesson_id}"
                                    if not st.session_state.get(closing_quiz_xp_key, False):
                                        # Award fragment XP for quiz completion
                                        fragment_xp = get_fragment_xp_breakdown(lesson.get('xp_reward', 30))
                                        # Quiz ko≈Ñcowy dostaje 1/3 z XP practical_exercises 
                                        success, earned_xp = award_fragment_xp(lesson_id, 'closing_quiz', step_xp_values['practical_exercises'] // 3)
                                        st.session_state[closing_quiz_xp_key] = True
                                        if success and earned_xp > 0:
                                            show_xp_notification(earned_xp, f"Zdoby≈Çe≈õ {earned_xp} XP za uko≈Ñczenie quizu ko≈Ñcowego!")
                                    
                                    if quiz_passed:
                                        st.success("‚úÖ Gratulacje! Zaliczy≈Çe≈õ quiz ko≈Ñcowy! Mo≈ºesz teraz przej≈õƒá do podsumowania.")
                                    else:
                                        st.error("‚ùå Aby przej≈õƒá do podsumowania, musisz uzyskaƒá przynajmniej 75% poprawnych odpowiedzi. Spr√≥buj ponownie!")
                            else:
                                # Standardowa obs≈Çuga dla innych zak≈Çadek (exercises)
                                tab_data = sub_tabs_data[tab_key]
                                
                                # Wy≈õwietl opis zak≈Çadki je≈õli istnieje
                                if 'description' in tab_data:
                                    st.info(tab_data['description'])
                                
                                # Wy≈õwietl sekcje w zak≈Çadce
                                if 'sections' in tab_data:
                                    for section in tab_data['sections']:
                                        st.markdown(f"### {section.get('title', 'Sekcja')}")
                                        st.markdown(section.get('content', 'Brak tre≈õci'), unsafe_allow_html=True)
                                else:
                                    st.warning(f"Zak≈Çadka '{tab_title}' nie zawiera sekcji do wy≈õwietlenia.")

'''
    
    # Wstaw nowy kod
    content = content.replace(target, new_logic + target)
    
    # Zapisz plik
    with open(file_path, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Dodano logikƒô renderowania dla nowej struktury")
    return True

def main():
    print("üîß OSTATECZNA NAPRAWA SEKCJI PRAKTYKA")
    print("=" * 50)
    
    # Krok 1: Napraw uszkodzone emoji
    fix_broken_emoji_lines()
    
    # Krok 2: Dodaj brakujƒÖcƒÖ logikƒô renderowania
    add_missing_rendering_logic()
    
    print("\n‚úÖ WSZYSTKIE NAPRAWY ZAKO≈ÉCZONE")
    print("üöÄ Sekcja Praktyka powinna teraz dzia≈Çaƒá poprawnie")

if __name__ == "__main__":
    main()
